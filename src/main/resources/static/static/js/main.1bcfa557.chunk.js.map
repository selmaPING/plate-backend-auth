{"version":3,"sources":["http-common.js","services/radnik.service.js","components/add-radnik.component.js","components/radnik.component.js","components/radnik-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","ime","AddRadnik","props","onChangeIme","bind","onChangePrezime","saveRadnik","newRadnik","state","prezime","submitted","e","this","setState","target","value","RadnikDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","Radnik","getRadnik","updateRadnik","deleteRadnik","currentRadnik","message","match","params","prevState","update","history","push","RadniciList","onChangeSearchIme","retrieveRadnici","refreshList","setActiveRadnik","removeAllRadnici","searchIme","radnici","currentIndex","getAll","radnik","index","deleteAll","findByTitle","placeholder","map","key","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1bcfa557.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://app-za-plate.herokuapp.com/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\r\n\r\nclass RadnikDataService {\r\n  getAll() {\r\n    return http.get(\"/radnici\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/radnici/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/radnici\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/radnici/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/radnici/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/radnici`);\r\n  }\r\n\r\n  findByTitle(ime) {\r\n    return http.get(`/radnici?ime=${ime}`);\r\n  }\r\n}\r\n\r\nexport default new RadnikDataService();","import React, { Component } from \"react\";\r\nimport RadnikDataService from \"../services/radnik.service\";\r\n\r\nexport default class AddRadnik extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeIme = this.onChangeIme.bind(this);\r\n    this.onChangePrezime = this.onChangePrezime.bind(this);\r\n    this.saveRadnik = this.saveRadnik.bind(this);\r\n    this.newRadnik = this.newRadnik.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      ime: \"\",\r\n      prezime: \"\",\r\n\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  onChangeIme(e) {\r\n    this.setState({\r\n      ime: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePrezime(e) {\r\n    this.setState({\r\n      prezime: e.target.value\r\n    });\r\n  }\r\n\r\n  saveRadnik() {\r\n    var data = {\r\n      ime: this.state.ime,\r\n      prezime: this.state.prezime\r\n    };\r\n\r\n    RadnikDataService.create(data)\r\n      .then((response) => {\r\n        this.setState({\r\n          id: response.data.id,\r\n          ime: response.data.ime,\r\n          prezime: response.data.prezime,\r\n\r\n          submitted: true\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newRadnik() {\r\n    this.setState({\r\n      id: null,\r\n      ime: \"\",\r\n      prezime: \"\",\r\n\r\n      submitted: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>UspjeÅ¡no ste dodali!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newRadnik}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Ime</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"ime\"\r\n                required\r\n                value={this.state.ime}\r\n                onChange={this.onChangeIme}\r\n                name=\"ime\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Prezime</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"prezime\"\r\n                required\r\n                value={this.state.prezime}\r\n                onChange={this.onChangePrezime}\r\n                name=\"prezime\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.saveRadnik} className=\"btn btn-success\">\r\n              Dodaj\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport RadnikDataService from \"../services/radnik.service\";\r\n\r\nexport default class Radnik extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeIme = this.onChangeIme.bind(this);\r\n    this.onChangePrezime = this.onChangePrezime.bind(this);\r\n    this.getRadnik = this.getRadnik.bind(this);\r\n    this.updateRadnik = this.updateRadnik.bind(this);\r\n    this.deleteRadnik = this.deleteRadnik.bind(this);\r\n\r\n    this.state = {\r\n      currentRadnik: {\r\n        id: null,\r\n        ime: \"\",\r\n        prezime: \"\"\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRadnik(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeIme(e) {\r\n    const ime = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentRadnik: {\r\n          ...prevState.currentRadnik,\r\n          ime: ime\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangePrezime(e) {\r\n    const prezime = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentRadnik: {\r\n        ...prevState.currentRadnik,\r\n        prezime: prezime\r\n      }\r\n    }));\r\n  }\r\n\r\n  getRadnik(id) {\r\n    RadnikDataService.get(id)\r\n      .then((response) => {\r\n        this.setState({\r\n          currentRadnik: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateRadnik() {\r\n    RadnikDataService.update(\r\n      this.state.currentRadnik.id,\r\n      this.state.currentRadnik\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"Radnik je uspjeÅ¡no aÅ¾uriran!\"\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteRadnik() {\r\n    RadnikDataService.delete(this.state.currentRadnik.id)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.props.history.push(\"/radnici\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentRadnik} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentRadnik ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Radnici</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"ime\">Ime</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"ime\"\r\n                  value={currentRadnik.ime}\r\n                  onChange={this.onChangeIme}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"prezime\">Prezime</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"prezime\"\r\n                  value={currentRadnik.prezime}\r\n                  onChange={this.onChangePrezime}\r\n                />\r\n              </div>\r\n            </form>\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.deleteRadnik}\r\n            >\r\n              IzbriÅ¡i\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateRadnik}\r\n            >\r\n              AÅ¾uriraj\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Molimo Vas kliknite na Radnika...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport RadnikDataService from \"../services/radnik.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class RadniciList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchIme = this.onChangeSearchIme.bind(this);\r\n    this.retrieveRadnici = this.retrieveRadnici.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveRadnik = this.setActiveRadnik.bind(this);\r\n    this.removeAllRadnici = this.removeAllRadnici.bind(this);\r\n    this.searchIme = this.searchIme.bind(this);\r\n\r\n    this.state = {\r\n      radnici: [],\r\n      currentRadnik: null,\r\n      currentIndex: -1,\r\n      searchIme: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveRadnici();\r\n  }\r\n\r\n  onChangeSearchIme(e) {\r\n    const searchIme = e.target.value;\r\n\r\n    this.setState({\r\n      searchIme: searchIme\r\n    });\r\n  }\r\n\r\n  retrieveRadnici() {\r\n    RadnikDataService.getAll()\r\n      .then(response => {\r\n        this.setState({\r\n          radnici: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveRadnici();\r\n    this.setState({\r\n      currentRadnik: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveRadnik(radnik, index) {\r\n    this.setState({\r\n      currentRadnik: radnik,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  removeAllRadnici() {\r\n    RadnikDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchIme() {\r\n    this.setState({\r\n      currentRadnik: null,\r\n      currentIndex: -1\r\n    });\r\n\r\n    RadnikDataService.findByTitle(this.state.searchIme)\r\n      .then(response => {\r\n        this.setState({\r\n          radnici: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { searchIme, radnici, currentRadnik, currentIndex } = this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"TraÅ¾i po imenu...\"\r\n              value={searchIme}\r\n              onChange={this.onChangeSearchIme}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchIme}\r\n              >\r\n                TraÅ¾i\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Lista Radnika</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {radnici &&\r\n              radnici.map((radnik, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveRadnik(radnik, index)}\r\n                  key={index}\r\n                >\r\n                  {radnik.ime}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllRadnici}\r\n          >\r\n            IzbriÅ¡i sve radnike\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentRadnik ? (\r\n            <div>\r\n              <h4>Radnik</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Ime:</strong>\r\n                </label>{\" \"}\r\n                {currentRadnik.ime}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Prezime:</strong>\r\n                </label>{\" \"}\r\n                {currentRadnik.prezime}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/radnici/\" + currentRadnik.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Uredi\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Molimo Vas izaberite Radnika...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddRadnik from \"./components/add-radnik.component\";\nimport Radnik from \"./components/radnik.component\";\nimport RadniciList from \"./components/radnik-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/radnici\"} className=\"navbar-brand\">\n            Plate\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/radnici\"} className=\"nav-link\">\n                Radnici\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add-radnik\"} className=\"nav-link\">\n                Dodaj radnika\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/radnici\"]} component={RadniciList} />\n            <Route exact path=\"/add-radnik\" component={AddRadnik} />\n            <Route path=\"/radnici/:id\" component={Radnik} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/*const express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\napp.use(\n    cors({\n      origin: [\"http://localhost:3000\"],\n      methods: [\"GET\", \"POST\", \"DELETE\", \"PUT\"],\n      credentials: true,\n    })\n  );*/\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}